interface(quiet=true):
with(linalg): die := rand(0..10000):

alleins := transpose(array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])):

antibiotics := [
AM,AMC,AMP8X,CAZ,CEC,CPD,CPR,CRO,CTT,CTX, CXM,  FEP,  SAM,TZP,ZOX]:

labels2 := [
[0,0,0,0],[1,0,0,0],[0,1,0,0],[0,0,1,0],
[0,0,0,1],[1,1,0,0],[1,0,1,0],[1,0,0,1],
[0,1,1,0],[0,1,0,1],[0,0,1,1],[1,1,1,0],
[1,1,0,1],[1,0,1,1],[0,1,1,1],[1,1,1,1]]:

lprint(labels2);

cubegraph := {}:

for i from 1 to 16 do
for j from 1 to 16 do
agree := 0:
for k from 1 to 4 do
if (labels2[i][k] = labels2[j][k]) then agree := agree+1: fi:
od:
if (agree = 3) then cubegraph := cubegraph union {{i,j}}: fi:
od:od:

Data := [[0.0017775, 0.00172, 0.001448333, 0.002041667,
0.001781667, 0.001556667, 0.001799167, 0.002008333, 0.001184167, 0.001751667, 0.001544167, 0.0017675, 0.002246667,0.002005, 0.0000625, 0.002046667],
[0.001435, 0.001416667, 0.001671667, 0.001060833, 0.001573333, 0.001376667, 0.0015375, 0.001350833, 0.0000733, 0.001456667,0.001625, 0.001306667, 0.001914167, 0.00159, 0.0000675, 0.0017275],
[0.001850833, 0.00157, 0.002024167, 0.001948333, 0.002081667, 0.002185833, 0.0000508, 0.002165, 0.0020325, 0.002434167, 0.0021975, 0.0000875, 0.002321667, 0.0000825, 0.0000342, 0.002820833],
[0.002134167, 0.000288333, 0.002041667, 0.002618333, 0.002655833, 0.00263, 0.001604167, 0.000575833, 0.002924167, 0.0026875, 0.002755833, 0.002893333, 0.002676667, 0.001378333, 0.000250833, 0.0025625],
[0.002258333, 0.000234167, 0.002395833, 0.002150833, 0.001995833, 0.00215, 0.002241667, 0.000171667, 0.00223, 0.0026475, 0.001845833, 0.00264, 0.000095, 0.0000933, 0.000214167, 0.000515833],
[0.000595, 0.000431667, 0.001760833, 0.002604167, 0.000245, 0.0006375, 0.002650833, 0.000388333, 0.00291, 0.0030425, 0.001470833, 0.0009625, 0.000985833, 0.0011025, 0.003095833, 0.003268333],
[0.001743333, 0.001553333, 0.0020175, 0.0017625, 0.001661667, 0.0002225, 0.000165, 0.000255833, 0.002041667, 0.001785, 0.00205, 0.001810833, 0.000239167, 0.000220833, 0.002175, 0.000288333],
[0.001091667, 0.00083, 0.00288, 0.002554167, 0.000286667, 0.001406667, 0.0031725, 0.00054, 0.002731667, 0.003041667, 0.000655833, 0.00274, 0.000750833, 0.0011525, 0.000435833, 0.003226667],
[0.002125, 0.003238333, 0.003290833, 0.002804167, 0.001921667, 0.000545833, 0.0028825, 0.002965833, 0.003081667, 0.0005875, 0.0028875, 0.0031925, 0.003180833, 0.00089, 0.0035075, 0.002543333],
[0.00016, 0.000185, 0.001653333, 0.001935833, 0.000085, 0.000225, 0.001969167, 0.00014, 0.002295, 0.0023475, 0.0001375, 0.000119167, 0.0000917, 0.000203333, 0.002269167, 0.002411667],
[0.0017475, 0.0004225, 0.00294, 0.00207, 0.0017, 0.002024167, 0.001910833, 0.001578333, 0.002918333, 0.0019375, 0.002173333, 0.001590833, 0.0016775, 0.002754167, 0.003271667, 0.002923333],
[0.00259, 0.002066667, 0.00244, 0.002393333, 0.002571667, 0.002735, 0.002956667, 0.002445833, 0.002651667, 0.002831667, 0.0028075, 0.002795833, 0.002863333, 0.0026325, 0.000610833, 0.0032025],
[0.001879167, 0.0021975, 0.002455833, 0.000133333, 0.0025325, 0.002504167, 0.002308333, 0.00257, 0.0000833, 0.0000942, 0.002436667,  0.002528333, 0.003001667, 0.002885833, 0.0000942, 0.003453333],
[0.002679167, 0.002709167, 0.0030375, 0.002426667, 0.002905833, 0.002453333, 0.000171667, 0.0025, 0.0025275, 0.000140833, 0.003309167, 0.000609167, 0.002739167, 0.0000933, 0.0001425, 0.000170833],
[0.000993333, 0.001105833, 0.0016975, 0.002069167, 0.000805, 0.001115833, 0.001894167, 0.001170833, 0.0021375, 0.0026825, 0.00201, 0.001103333, 0.001105, 0.000680833, 0.002688333, 0.002590833]]:


for i from 1 to 15 do
F := []:
for j from 1 to 16 do F := [F[],die()]: od:
Data := [Data[],F]:
od:

T := []:

for antibiotic from 1 to 15 do
print(antibiotic);
fitness := Data[antibiotic];
#lprint(fitness);

outdeg := []: allcount := 0:
for i from 1 to 16 do
count := 0:
for j from 1 to 16 do
if ((member({i,j},cubegraph)) and (fitness[i] < fitness[j])) then
  count := count+1:
fi:
od:
allcount := allcount+count:
outdeg := [outdeg[],count]:
od:

M := []:
for i from 1 to 16 do
M := [M[],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]:
od:

for i from 1 to 16 do
if (outdeg[i] = 0) then M[i][i] := 1:
else
 for j from 1 to 16 do 
 if ((member({i,j},cubegraph)) and (fitness[i] < fitness[j])) then
 M[i][j] := 1/outdeg[i]:
 fi:
 od:
fi:
od:

T := [T[],M]:
for k from 1 to 16 do lprint(M[k],`,`); od:
od:
quit


